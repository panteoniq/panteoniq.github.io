<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://panteoniq.github.io/</id><title>시 쓰는 개발자</title><subtitle>시 쓰는 것도 좋아하고, 노래 부르는 것도 좋아하는 개발자입니다</subtitle> <updated>2022-12-14T20:47:30+09:00</updated> <author> <name>Danny</name> <uri>https://panteoniq.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://panteoniq.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://panteoniq.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2022 Danny </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[MariaDB 10.4]</title><link href="https://panteoniq.github.io/posts/Mariadb_10_4/" rel="alternate" type="text/html" title="[MariaDB 10.4] " /><published>2022-11-16T20:38:53+09:00</published> <updated>2022-11-16T20:38:53+09:00</updated> <id>https://panteoniq.github.io/posts/Mariadb_10_4/</id> <content src="https://panteoniq.github.io/posts/Mariadb_10_4/" /> <author> <name>Danny</name> </author> <category term="Development" /> <category term="DB" /> <summary> MariaDB 10.4 이상의 변경점 MariaDB는 현재 (22년 11월 기준) 10.11까지 릴리즈된 상태이다. 이 중 MariaDB 10.4를 기점으로 몇 가지 굵직한 변화가 있었는데 이에 대해 설명하고자 한다. mysql.user가 테이블에서 뷰로 변경 테이블은 실제로 데이터가 존재하는 공간이기 때문에 Insert 및 Update가 가능하지만 View는 테이블의 일부 데이터를 간추려 테이블처럼 제공하기 때문에 Insert 및 Update를 실행할 수 없으며 View에 존재하는 데이터 또한 실제로 존재하는 데이터가 아니라 테이블에서 가져온 데이터를 가상의 공간에서 보여주는 역할을 한다. mysql.user가 테이블에서 뷰로 변경됨에 따라 참고해야 할 내용은 다음과 같다 mysql.glob... </summary> </entry> <entry><title>[UDS] Unix Domain Socket</title><link href="https://panteoniq.github.io/posts/unix_domain_socket/" rel="alternate" type="text/html" title="[UDS] Unix Domain Socket" /><published>2022-11-10T21:07:25+09:00</published> <updated>2022-11-10T21:18:25+09:00</updated> <id>https://panteoniq.github.io/posts/unix_domain_socket/</id> <content src="https://panteoniq.github.io/posts/unix_domain_socket/" /> <author> <name>Danny</name> </author> <category term="Development" /> <category term="Etc" /> <summary> UDS? Unix Domain Socket, 짧게 줄여 UDS는 일반적으로 우리가 사용하는 TCP/UDP와는 조금 다른 개념이다. TCP/UDP는 네트워크 통신을 하는 반면 UDS는 파일시스템 내부의 파일을 이용해 통신한다. 네트워크를 사용하지 않고 어떻게 통신을 하느냐고 물을 수 있는데, 거기에 답이 있다. 다른 Host들 간 통신에는 반드시 네트워크가 필요한 반면에, Host 내부 통신이라면 네트워크가 필요없다는 것이다. 즉, UDS는 네트워크 통신이 필요없는 Host 내부 프로세스 간 통신에 사용된다. UDS를 사용할 경우 기존에 사용한 TCP/UDP system call을 그대로 사용할 수 있다는 장점이 있다. 1. include #include &amp;lt;sys/types.h&amp;gt; #i... </summary> </entry> <entry><title>[스레드 풀/Thread Pool] 스레드 풀의 적정 크기는? / 스레드 풀의 적절한 사이즈는</title><link href="https://panteoniq.github.io/posts/%EC%8A%A4%EB%A0%88%EB%93%9C%ED%92%80%EC%9D%98_%EC%A0%81%EC%A0%95%EC%82%AC%EC%9D%B4%EC%A6%88/" rel="alternate" type="text/html" title="[스레드 풀/Thread Pool] 스레드 풀의 적정 크기는? / 스레드 풀의 적절한 사이즈는" /><published>2022-11-10T21:04:10+09:00</published> <updated>2022-11-10T21:18:25+09:00</updated> <id>https://panteoniq.github.io/posts/%EC%8A%A4%EB%A0%88%EB%93%9C%ED%92%80%EC%9D%98_%EC%A0%81%EC%A0%95%EC%82%AC%EC%9D%B4%EC%A6%88/</id> <content src="https://panteoniq.github.io/posts/%EC%8A%A4%EB%A0%88%EB%93%9C%ED%92%80%EC%9D%98_%EC%A0%81%EC%A0%95%EC%82%AC%EC%9D%B4%EC%A6%88/" /> <author> <name>Danny</name> </author> <category term="Development" /> <category term="Etc" /> <summary> 스레드 풀의 적정 사이즈는 어느 정도일까요? 1개? 2개? 또는 최대한 많이? 적절한 답을 찾지 못해 구글링하던 도중 이에 대해 잘 정리된 글을 읽고 번역해보았습니다. 다소 부족한 부분이 있더라도 양해 부탁드리며, 원문을 보고 싶으시다면 다음을 참고 바랍니다. 원문 : https://jobs.zalando.com/tech/blog/how-to-set-an-ideal-thread-pool-size/?gh_src=4n3gxh1 자바에서 스레드를 생성하는 것은 공짜가 아니다! 실제 오버헤드는 플랫폼마다 다르겠지만, 스레드가 생성될 때는 요청이 처리되는 지연 시간이 발생하고 JVM과 OS에 의한 추가적인 처리 과정이 필요하다. 그렇기 때문에 스레드 풀이 필요하다. 스레드 풀은 현재의 작업을 수행하기 위... </summary> </entry> <entry><title>memset과 bzero의 차이점</title><link href="https://panteoniq.github.io/posts/memset_bzero/" rel="alternate" type="text/html" title="memset과 bzero의 차이점" /><published>2022-10-24T21:20:04+09:00</published> <updated>2022-10-24T21:20:04+09:00</updated> <id>https://panteoniq.github.io/posts/memset_bzero/</id> <content src="https://panteoniq.github.io/posts/memset_bzero/" /> <author> <name>Danny</name> </author> <category term="Development" /> <category term="C/C++" /> <summary> 1. bzero #include void bzero(void *s, size_t n); 이름에서도 나타나듯이, zero의 값을 덮어씀 0x00의 값을 s 영역에 n 크기만큼 쓰며, 오직 0x00만의 값만 쓸 수 있다 쓰지 않기를 권장하는(deprecated된) 함수. 실제로 man bzero를 실행하면 다음 문구를 확인 가능 4.3BSD. This function is deprecated (marked as LEGACY in POSIX.1-2001): use memset(3) in new programs. POSIX.1-2008 removes the specification of bzero(). 2. memset #include void *memset(void *s,... </summary> </entry> </feed>
